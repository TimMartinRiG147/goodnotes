name: Goodnotes CI Task

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      KIND_VERSION: v0.14.0
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup KinD Cluster
      run: |
        # Download and install KinD (Kubernetes in Docker).
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-$(uname)-amd64
        chmod +x ./kind
        if ! ./kind create cluster --config ./config/cluster.yaml; then
          echo "Failed to create KinD cluster"
          exit 1
        fi

    - name: Disable IPv6
      run: |
        # Disables IPv6 on the system to avoid conflicts, necessary for some network setups.
        if ! sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1 || ! sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1 || ! sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1; then
          echo "Failed to disable IPv6"
          exit 1
        fi

    - name: Configuration, tools and dependencies
      run: |
        # Install necessary tools and updates.

        sudo apt update && sudo apt install siege -y
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        chmod +x ./scripts/*.sh

    - name: Deploy Applications and Ingress
      run: |
        # Deploy Kubernetes applications and ingress.
        if ! kubectl apply -f ./config/deployment-bar.yaml || ! kubectl apply -f ./config/deployment-foo.yaml || ! kubectl apply -f ./config/ingress.yaml; then
          echo "Failed to apply Kubernetes configurations"
          exit 1
        fi
        sleep 15

    - name: Deploy Ingress Controller
      run: |
        if ! kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml; then
          echo "Failed to deploy Ingress Controller"
          exit 1
        fi

    # - name: Wait for Deployments
    #   run: |
    #     # Ensures that all deployments are fully available before proceeding.
    #     sleep 15
    #     if ! kubectl wait --for=condition=available --timeout=300s deployment/ingress-nginx-controller -n ingress-nginx || ! kubectl wait --for=condition=available --timeout=300s deployment/bar || ! kubectl wait --for=condition=available --timeout=300s deployment/foo; then
    #       echo "Deployment did not become available"
    #       exit 1
    #     fi

    - name: Verify Health of Deployments and Ingress
      run: |
        # Verifies that all deployments and the Ingress are healthy before proceeding.
        echo "Checking health of Kubernetes resources..."
        # Initialize counters for retries
        max_retries=12
        sleep_interval=10
        
        # Function to check pod status
        check_pods() {
          kubectl get pods --all-namespaces | grep Running
        }

        # Function to check ingress status
        check_ingress() {
          kubectl get ingress --all-namespaces | grep -i healthy
        }

        # Wait for pods to be in Running state
        success=false
        for ((i=0; i<$max_retries; i++)); do
          if check_pods; then
            echo "All pods are in the Running state."
            success=true
            break
          else
            echo "Waiting for pods to become healthy..."
            sleep $sleep_interval
          fi
        done

        if [ "$success" = false ]; then
          echo "Failed: Some pods are not healthy after waiting."
          exit 1
        fi

        # Wait for Ingress to be healthy
        success=false
        for ((i=0; i<$max_retries; i++)); do
          if check_ingress; then
            echo "Ingress is in a healthy state."
            success=true
            break
          else
            echo "Waiting for Ingress to become healthy..."
            sleep $sleep_interval
          fi
        done

        if [ "$success" = false ]; then
          echo "Failed: Ingress is not healthy after waiting."
          exit 1
        fi

    - name: Load Testing
      run: |
        # Executes a load test script and captures the output for reporting.
        if ! bash ./scripts/load-test.sh; then
          echo "Load testing failed"
          exit 1
        fi

    - name: Post results to PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          # Create a PR comment with the results of the load test
          const fs = require('fs');
          const siegeResults = fs.readFileSync('siege_results.txt', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: siegeResults
          });
